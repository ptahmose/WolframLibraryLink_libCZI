Building libCZI                 {#buildinglibCZI}
===============

libCZI aims to be portable and should build readily using a C++11 compiler. Here are some instructions
for building on Windows and on Linux.

Building on Windows
-------------------

For Windows a solution-file (for VisualStudio 2015) <tt>LibCZI-Solution</tt> is provided.

![libCZI solution](VisualStudioProj_1.PNG "libCZI solution")
@image latex VisualStudioProj_1.PNG "libCZI solution"

We find these solution configurations and solution platforms defined:

![libCZI solution configurations/platforms](VisualStudioProj_2.PNG "libCZI solution configurations/platforms")
@image latex VisualStudioProj_2.PNG "libCZI solution configurations/platforms" height=10.8cm

The configuration "static Debug" and "static Release" are configured to build a static libCZI-library
(and link this static library e. g. in the project CZIcmd). The configurations "Debug" and "Release" will
create a dynamic link library libCZI.DLL (and CZIcmd will consume this DLL).
The "UnitTest" project can only be used with the "static" configurations, so it needs to be excluded from a 
batch-build:

![libCZI batch build](VisualStudioProj_3.PNG "libCZI batch build")
@image latex VisualStudioProj_3.PNG "libCZI batch build" height=10.8cm

The projects are configured to put their results into these respective folders:

![libCZI build-targets folder layout](VisualStudioProj_4.PNG "build-targets folder layout")
@image latex VisualStudioProj_4.PNG "build-targets folder layout"

After performing a build operation, you should find all build results there - like shown here:

![libCZI build results](VisualStudioProj_5.PNG "build results")
@image latex VisualStudioProj_5.PNG "build results"

Building on Linux
-----------------

For building on Linux, we are providing CMake-files. The CMake-files are very basic and minimal at this
point, but should give you a working build.

In order to generate makefiles from the CMake-files, execute this command

	cmake -G "Unix Makefiles"

![libCZI generate makefles with CMake](LinuxBuild_1.PNG "libCZI generate makefles with CMake")
@image latex LinuxBuild_1.PNG "libCZI generate makefles with CMake"

Now executing a <tt>make</tt> command should produce a working binary:

![libCZI make](LinuxBuild_2.PNG "libCZI make")
@image latex LinuxBuild_2.PNG "libCZI make"



Building the documentation
--------------------------

Executing <tt>doxygen</tt> will produce the documentation in this folder:

![libCZI doxygen](doxygen_1.PNG "libCZI doxygen")
@image latex doxygen_1.PNG "libCZI doxygen"

In order to build the documentation in PDF-format, go into the folder ../Build/Doxygen/latex and
execute <tt>make</tt>.\n
We had one issue with this: in order for the PDF-generation to succeed properly, we needed to make this
change: in the file ../Build/Doxygen/latex/refman.tex (which is generated by the doxygen-run) find a line

	\usepackage[utf8]{inputenc}

and change it into

	\usepackage[utf8x]{inputenc}

![fixing issue with PDF](doxygen_2.PNG "fixing issue with PDF")
@image latex doxygen_2.PNG "fixing issue with PDF"
