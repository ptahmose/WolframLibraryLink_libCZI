# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: Windowsx86
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)\C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.SourcesDirectory)/build
      cmakeArgs: '.. -A Win32 -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C -DWLLCZI_BUILD_UNITTESTS=ON'
  - task: CmdLine@2
    inputs:
      script: 'cmake --build  .\build --config Release'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/Release/wllczi.dll
      artifactName: wllcziWinx86
- job: Windowsx64
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)\C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      cmakeArgs: '.. -A x64 -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C  -DWLLCZI_BUILD_UNITTESTS=ON'
  - task: CmdLine@2
    inputs:
      script: 'cmake --build  .\build --config Release'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/Release/wllczi.dll
      artifactName: wllcziWinx64
- job: LinuxARM
  timeoutInMinutes: 240
  dependsOn: 
  - Windowsx86
  - Windowsx64
  pool:
    vmImage: 'ubuntu-latest'
    timeoutInMinutes: 240
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - script: env;mkdir ~/artifacts;mkdir ~/artifacts/Winx86;mkdir ~/artifacts/Winx64;mkdir ~/artifacts/Linuxx64
    displayName: 'Make folders where to put the Windows-binaries'
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: wllcziWinx86
      patterns: '**/*'
      path: $(Agent.BuildDirectory)/artifacts/Winx86
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: wllcziWinx64
      patterns: '**/*'
      path: $(Agent.BuildDirectory)/artifacts/Winx64
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)/C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C  -DWLLCZI_BUILD_UNITTESTS=ON'
  - script: |
      cmake --build  ./build --config Release
      cp ./build/wllczi/libwllczi.so  ~/artifacts/Linuxx64/ 
    displayName: 'Build Linux-x64'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/libwllczi.so
      artifactName: wllcziLinuxx64
  - script: |
      cp  $(Agent.BuildDirectory)/artifacts/Winx64/* ~/artifacts/Winx64
      cp  $(Agent.BuildDirectory)/artifacts/Winx86/* ~/artifacts/Winx86
      ls -l -R ~/artifacts
      sudo apt-get -qq install qemu-system-arm expect
      qemu-system-arm --version
      uname -a
      lscpu
      pwd
      echo ${HOME}
      sudo modprobe nbd max_part=8   # enable NBD on the host
      wget "https://onedrive.live.com/download?cid=A78BEB4649B27A1A&resid=A78BEB4649B27A1A%21524673&authkey=ADOgFOWKONZdQK0" -O raspiqemu.zip --no-verbose
      unzip -P "Xrk7#4Pt" raspiqemu.zip    
      rm raspiqemu.zip
      sudo qemu-nbd --connect=/dev/nbd0 raspiwllczibuildsystem/2020-02-13-raspbian-buster.qcow
      sudo mkdir /mnt/raspi
      sudo chmod 777 /mnt/raspi
      sleep 10;sync
      sudo mount /dev/nbd0p2 /mnt/raspi
      sudo mkdir /mnt/raspi/home/pi/EXTDATA
      sudo sudo chmod 777 /mnt/raspi/home/pi/EXTDATA
      sudo cp -r ~/artifacts /mnt/raspi/home/pi/EXTDATA
      sudo ls -l -R /mnt/raspi/home/pi/EXTDATA
      sudo umount /mnt/raspi/
      sudo qemu-nbd --disconnect /dev/nbd0
      #sudo rmmod nbd
      cp CI/autorun.expect raspiwllczibuildsystem/autorun.expect
      cp CI/run_raspi.sh raspiwllczibuildsystem/run_raspi.sh
      chmod +x raspiwllczibuildsystem/autorun.expect
      chmod +x raspiwllczibuildsystem/run_raspi.sh
      cd raspiwllczibuildsystem
      sleep 10;sync
      expect  autorun.expect
      echo "****************** QEMU FINISHED ******************""
      sleep 10;sync;cd ..
      #sudo modprobe nbd max_part=8 
      sudo qemu-nbd --read-only --connect=/dev/nbd1 raspiwllczibuildsystem/2020-02-13-raspbian-buster.qcow
      sleep 10
      sudo mount -o ro,noload /dev/nbd1p2 /mnt/raspi
      echo "/mnt/raspi/home/pi/";ls -l /mnt/raspi/home/pi/
      echo "/mnt/raspi/home/pi/PACLETOUT/";ls -l /mnt/raspi/home/pi/PACLETOUT/
      mkdir paclet
      cp  /mnt/raspi/home/pi/PACLETOUT/CZIReader-*.paclet paclet/
      sudo umount /mnt/raspi/
      sudo qemu-nbd --disconnect /dev/nbd1
      echo "ls -l paclet/";ls -l paclet/
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'
  - script: echo "##vso[task.setvariable variable=pacletname]`ls paclet/`"
    displayName: 'figure out name of paclet'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/paclet/$(pacletname)'
      artifact: 'Paclet'
      publishLocation: 'pipeline'



#sudo modprobe nbd max_part=8   # enable NBD on the host
#sudo qemu-nbd --read-only --connect=/dev/nbd0 raspiwllczibuildsystem/2020-02-13-raspbian-buster.qcow
#sudo mkdir /mnt/raspi
#sudo mount -o ro,noload /dev/nbd0p2 /mnt/raspi
#ls -l /mnt/raspi
#sudo umount /mnt/raspi/
#sudo qemu-nbd --disconnect /dev/nbd0
#sudo rmmod nbd