# Build wllczi for Windows-x86 and Windows-x64, then for Linux-x64,
# then use QEMU to run an ARM-32bit-build, then package everything into a paclet

trigger:
- master

jobs:
- job: Windowsx86
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)\C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      workingDirectory: $(Build.SourcesDirectory)/build
      cmakeArgs: '.. -A Win32 -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C -DWLLCZI_BUILD_UNITTESTS=ON'
  - task: CmdLine@2
    inputs:
      script: 'cmake --build  .\build --config Release'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/Release/wllczi.dll
      artifactName: wllcziWinx86
- job: Windowsx64
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)\C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      cmakeArgs: '.. -A x64 -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C  -DWLLCZI_BUILD_UNITTESTS=ON'
  - task: CmdLine@2
    inputs:
      script: 'cmake --build  .\build --config Release'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/Release/wllczi.dll
      artifactName: wllcziWinx64
- job: LinuxARM
  timeoutInMinutes: 240
  dependsOn: 
  - Windowsx86
  - Windowsx64
  pool:
    vmImage: 'ubuntu-latest'
    timeoutInMinutes: 240
  steps:
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'C.zip'
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'zippw.txt'
  - script: env;mkdir ~/artifacts;mkdir ~/artifacts/Winx86;mkdir ~/artifacts/Winx64;mkdir ~/artifacts/Linuxx64
    displayName: 'Make folders where to put the Windows-binaries'
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: wllcziWinx86
      patterns: '**/*'
      path: $(Agent.BuildDirectory)/artifacts/Winx86
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: wllcziWinx64
      patterns: '**/*'
      path: $(Agent.BuildDirectory)/artifacts/Winx64
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Agent.TempDirectory)/C.zip'
      destinationFolder: 'mathematicaheaders'
      cleanDestinationFolder: true      
  - task: CMake@1
    inputs:
      cmakeArgs: '.. -DCMAKE_BUILD_TYPE=Release -DWLLCZI_MATHEMATICAHEADERS=$(Build.SourcesDirectory)\mathematicaheaders\C  -DWLLCZI_BUILD_UNITTESTS=ON'
  - script: |
      cmake --build  ./build --config Release
      cp ./build/wllczi/libwllczi.so  ~/artifacts/Linuxx64/ 
    displayName: 'Build Linux-x64'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: $(Build.SourcesDirectory)/build/wllczi/libwllczi.so
      artifactName: wllcziLinuxx64
  - script: |
      zippw=`cat $(Agent.TempDirectory)/zippw.txt`
      cp  $(Agent.BuildDirectory)/artifacts/Winx64/* ~/artifacts/Winx64
      cp  $(Agent.BuildDirectory)/artifacts/Winx86/* ~/artifacts/Winx86
      #ls -l -R ~/artifacts
      sudo apt-get -qq update 
      sudo apt-get -qq install qemu-system-arm expect
      #qemu-system-arm --version
      #uname -a
      #lscpu
      #pwd
      #echo ${HOME}
      sudo modprobe nbd max_part=8   # enable NBD on the host
      wget "https://onedrive.live.com/download?cid=A78BEB4649B27A1A&resid=A78BEB4649B27A1A%21524673&authkey=ADOgFOWKONZdQK0" -O raspiqemu.zip --no-verbose
      unzip -P "$zippw" raspiqemu.zip    
      rm raspiqemu.zip
      # we mount the image, and copy the Windows- and Linux-builds into the image
      sudo qemu-nbd --connect=/dev/nbd0 raspiwllczibuildsystem/2020-02-13-raspbian-buster.qcow
      sudo mkdir /mnt/raspi
      sudo chmod 777 /mnt/raspi
      sleep 10;sync
      sudo mount /dev/nbd0p2 /mnt/raspi
      sudo mkdir /mnt/raspi/home/pi/EXTDATA
      sudo chmod 777 /mnt/raspi/home/pi/EXTDATA
      sudo cp -r ~/artifacts /mnt/raspi/home/pi/EXTDATA
      #sudo ls -l -R /mnt/raspi/home/pi/EXTDATA
      sudo umount /mnt/raspi/
      sudo qemu-nbd --disconnect /dev/nbd0
      #sudo rmmod nbd
      cp CI/autorun.expect raspiwllczibuildsystem/autorun.expect
      cp CI/run_raspi.sh raspiwllczibuildsystem/run_raspi.sh
      chmod +x raspiwllczibuildsystem/autorun.expect
      chmod +x raspiwllczibuildsystem/run_raspi.sh
      mkdir paclet
      cd paclet
      # In order to get the resulting paclet back from the ARM-guest, we run a minimal web-server on the host,
      # where the guest will put the result to. I tried to mount the image again, but for unknown reasons it did
      # not work. Sure, there must be better ways, but this works nicely so far.
      python3 ../CI/SimpleHTTPServerWithUpload.py &
      cd ..
      cd raspiwllczibuildsystem
      sleep 10;sync
      expect  autorun.expect
      echo "****************** QEMU FINISHED ******************"
      sleep 10;sync;cd ..
      kill %1         # stop the web-server
      echo "ls -l paclet/";ls -l paclet/
      countofiles=$(ls 2>/dev/null -Ubad1 -- paclet/*.paclet | wc -l) # check that we have more than one file 
      if [ $countofiles -eq 0 ]; then exit 1; fi                      # otherwise, end with error
      echo ARM-build and paclet-generation succeeded
    displayName: 'ARM-build & paclet generation'
  - script: echo "##vso[task.setvariable variable=pacletname]`ls paclet/*.paclet`"
    displayName: 'figure out name of paclet'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/$(pacletname)'
      artifact: 'Paclet'
      publishLocation: 'pipeline'
#  - task: PublishBuildArtifacts@1
#    inputs:
#      PathtoPublish: '$(Build.SourcesDirectory)/$(pacletname)'
#      ArtifactName: 'drop'
#      publishLocation: 'Container'


